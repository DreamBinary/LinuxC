
#include<iostream>
#include<algorithm>

using namespace std;

const int N = 1e3 + 10;
int block[N], askSeq[N], visitBit[N];//分配的物理块  虚页流 访问位
int blockNum, askNum; //物理块大小  虚页的长度
int idx = 0;//指针下标

void init() {
    cout << "简单Clock置换算法 请输入物理块大小" << endl;
    cin >> blockNum;
    cout << "请输入虚页长度" << endl;
    cin >> askNum;
    cout << "请选择页地址流产生方式\n1.系统随机生成，2.手动输入" << endl;
    int op;
    cin >> op;
    if (op == 1)//随机生成
    {
        for (int i = 1; i <= askNum; i++) {
            askSeq[i] = (rand() % (9 - 1 + 1)) + 1;//产生[1,9]的随机数
            cout << askSeq[i] << ' ';
        }
        cout << endl;
    } else if (op == 2)//手动输入
    {
        for (int i = 1; i <= askNum; i++) cin >> askSeq[i];
    }
    cout << "当前到达页号  ";
    for (int i = 1; i <= blockNum; i++)
        cout << "物理块 " << i << "  访问位  ";
    cout << "       是否产生缺页   指针指向页号" << endl;
}

void show(int k, bool flag) {
    cout << askSeq[k] << "              ";
    for (int i = 1; i <= blockNum; i++) {
        if (block[i] == 0) cout << "空                ";
        else cout << block[i] << "        " << visitBit[i] << "        ";
    }
    if (flag) cout << "     未产生缺页        ";
    else cout << "     产生缺页          ";
    cout << block[idx % blockNum + 1];
    cout << "\n--------------------------------------------------------------------------------------------------------"
         << endl;
}

int main() {
    init();//初始化
    for (int i = 1; i <= askNum; i++) {
        bool flag = false;//当前内存中是否有该页面
        int j = askSeq[i]; //
        for (int k = 1; k <= blockNum; k++) {
            if (block[k] == j) {
                flag = true;
                visitBit[k] = 1;
                break;
            }
        }

        bool temp_flag = flag;
        if (!flag) { // check if there is a blank block
            for (int k = 1; k <= blockNum; k++)
                if (block[k] == 0) {
                    block[k] = j;
                    visitBit[k] = 1;
                    flag = true;
                    break;
                }
        }
        while (!flag) { // use clock algorithm
            idx = idx % blockNum + 1; // idx++
            if (visitBit[idx] == 0 && idx <= blockNum) {
                block[idx] = j; // replace
                visitBit[idx] = 1;
                break;
            } else if (visitBit[idx] == 1) {
                visitBit[idx] = 0;
            }
        }
        show(i, temp_flag);//打印输出数据
    }
    return 0;
}